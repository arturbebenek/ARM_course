<?xml version="1.0" encoding="UTF-8"?>
<package name="Cont" stereotype="0x02">
 <class name="TableEvt" superclass="qpc::QEvt">
  <attribute name="philo" type="Philo*" visibility="0x00" properties="0x00"/>
 </class>
 <class name="CompTimeEvt" superclass="qpc::QTimeEvt">
  <documentation>Specialized time event for components. The time evnet can be owned by a component and can dispatch itself to the component.</documentation>
  <attribute name="comp" type="QHsm*" visibility="0x00" properties="0x00"/>
  <operation name="ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>The constructor to initialize a Component Time Event.

When creating a time event, you must commit it to a specific active object 'act',  event signal 'sig', and tick rate 'tickRate'. You cannot change these attributes later.</documentation>
   <parameter name="act" type="QActive *"/>
   <parameter name="comp" type="QHsm *"/>
   <parameter name="sig" type="enum_t const"/>
   <parameter name="tickRate" type="uint_fast8_t const"/>
   <code>QTimeEvt_ctorX(&amp;me-&gt;super, act, sig, tickRate);
me-&gt;comp = comp;</code>
  </operation>
  <operation name="dispatchToComp" type="void" visibility="0x00" properties="0x08">
   <code>QHSM_DISPATCH(me-&gt;comp, (QEvt const *)me);</code>
  </operation>
 </class>
 <class name="Table" superclass="qpc::QActive">
  <attribute name="philo[N_PHILO]" type="Philo" visibility="0x02" properties="0x00">
   <documentation>Embedded component state machine objects</documentation>
  </attribute>
  <attribute name="fork[N_PHILO]" type="uint8_t" visibility="0x02" properties="0x00"/>
  <attribute name="isHungry[N_PHILO]" type="uint8_t" visibility="0x02" properties="0x00"/>
  <statechart>
   <initial target="../1/3">
    <action>uint8_t n;
(void)e; /* suppress the compiler warning about unused parameter */

QS_OBJ_DICTIONARY(&amp;l_table);
QS_FUN_DICTIONARY(&amp;Table_initial);
QS_FUN_DICTIONARY(&amp;Table_active);
QS_FUN_DICTIONARY(&amp;Table_serving);
QS_FUN_DICTIONARY(&amp;Table_paused);

QS_SIG_DICTIONARY(DONE_SIG,      (void *)0); /* global signals */
QS_SIG_DICTIONARY(EAT_SIG,       (void *)0);
QS_SIG_DICTIONARY(PAUSE_SIG,     (void *)0);
QS_SIG_DICTIONARY(SERVE_SIG,     (void *)0);
QS_SIG_DICTIONARY(TEST_SIG,      (void *)0);
QS_SIG_DICTIONARY(HUNGRY_SIG,    (void *)0);
QS_SIG_DICTIONARY(HUNGRY_SIG,    (void *)0);
QS_SIG_DICTIONARY(TIMEOUT_SIG,   (void *)0);

QActive_subscribe(&amp;me-&gt;super, PAUSE_SIG);
QActive_subscribe(&amp;me-&gt;super, SERVE_SIG);
QActive_subscribe(&amp;me-&gt;super, TEST_SIG);

for (n = 0U; n &lt; N_PHILO; ++n) {
    QHSM_INIT(&amp;me-&gt;philo[n].super, (QEvt *)0);
    me-&gt;fork[n] = FREE;
    me-&gt;isHungry[n] = 0U;
    BSP_displayPhilStat(n, &quot;thinking&quot;);
}</action>
    <initial_glyph conn="3,3,5,1,43,25,-8">
     <action box="0,-2,6,2"/>
    </initial_glyph>
   </initial>
   <state name="active">
    <tran trig="TIMEOUT">
     <action>CompTimeEvt_dispatchToComp(Q_EVT_CAST(CompTimeEvt));</action>
     <tran_glyph conn="2,11,3,-1,14">
      <action box="0,-2,26,4"/>
     </tran_glyph>
    </tran>
    <tran trig="EAT">
     <action>Q_ERROR();</action>
     <tran_glyph conn="2,16,3,-1,14">
      <action box="0,-2,10,4"/>
     </tran_glyph>
    </tran>
    <tran trig="TEST">
     <tran_glyph conn="2,22,3,-1,14">
      <action box="0,-2,10,2"/>
     </tran_glyph>
    </tran>
    <state name="serving">
     <entry brief="give pending permissions to eat">uint8_t n;
for (n = 0U; n &lt; N_PHILO; ++n) { /* give permissions to eat... */
    if ((me-&gt;isHungry[n] != 0U)
        &amp;&amp; (me-&gt;fork[LEFT(n)] == FREE)
        &amp;&amp; (me-&gt;fork[n] == FREE))
    {
        TableEvt evt;

        me-&gt;fork[LEFT(n)] = USED;
        me-&gt;fork[n] = USED;

        /* synchronoulsy dispatch EAT event to the Philo component */
        evt.super.sig = EAT_SIG;
        evt.philo = &amp;me-&gt;philo[n];
        QHSM_DISPATCH(&amp;me-&gt;philo[n].super, (QEvt const *)&amp;evt);

        me-&gt;isHungry[n] = 0U;
        BSP_displayPhilStat(n, &quot;eating  &quot;);
    }
}</entry>
     <tran trig="HUNGRY">
      <action>uint8_t n, m;

/* find the index of the Philo from the event */
n = (Q_EVT_CAST(TableEvt)-&gt;philo - &amp;me-&gt;philo[0]);
/* philo ID must be in range and he must be not hungry */
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (!me-&gt;isHungry[n]));

BSP_displayPhilStat(n, &quot;hungry  &quot;);
m = LEFT(n);</action>
      <choice>
       <guard brief="both free">(me-&gt;fork[m] == FREE) &amp;&amp; (me-&gt;fork[n] == FREE)</guard>
       <action>TableEvt evt;
me-&gt;fork[m] = USED;
me-&gt;fork[n] = USED;

/* synchronoulsy dispatch EAT event to the Philo component */
evt.super.sig = EAT_SIG;
evt.philo = &amp;me-&gt;philo[n];
QHSM_DISPATCH(&amp;me-&gt;philo[n].super, (QEvt const *)&amp;evt);

BSP_displayPhilStat(n, &quot;eating  &quot;);</action>
       <choice_glyph conn="20,33,5,-1,10">
        <action box="1,0,10,2"/>
       </choice_glyph>
      </choice>
      <choice>
       <guard>else</guard>
       <action>me-&gt;isHungry[n] = 1U;</action>
       <choice_glyph conn="20,33,4,-1,5,10">
        <action box="1,5,6,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="4,33,3,-1,16">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <tran trig="DONE">
      <action>uint8_t n, m;
TableEvt evt;

/* find the index of the Philo from the event */
n = (Q_EVT_CAST(TableEvt)-&gt;philo - &amp;me-&gt;philo[0]);
/* philo ID must be in range and he must be not hungry */
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (!me-&gt;isHungry[n]));

BSP_displayPhilStat(n, &quot;thinking&quot;);
m = LEFT(n);
/* both forks of Phil[n] must be used */
Q_ASSERT((me-&gt;fork[n] == USED) &amp;&amp; (me-&gt;fork[m] == USED));

me-&gt;fork[m] = FREE;
me-&gt;fork[n] = FREE;
m = RIGHT(n); /* check the right neighbor */

if ((me-&gt;isHungry[m] != 0U) &amp;&amp; (me-&gt;fork[m] == FREE)) {
    me-&gt;fork[n] = USED;
    me-&gt;fork[m] = USED;
    me-&gt;isHungry[m] = 0U;

    /* synchronoulsy dispatch EAT event to the Philo component */
    evt.super.sig = EAT_SIG;
    evt.philo = &amp;me-&gt;philo[m];
    QHSM_DISPATCH(&amp;me-&gt;philo[m].super, (QEvt const *)&amp;evt);

    BSP_displayPhilStat(m, &quot;eating  &quot;);
}
m = LEFT(n); /* check the left neighbor */
n = LEFT(m); /* left fork of the left neighbor */
if ((me-&gt;isHungry[m] != 0U) &amp;&amp; (me-&gt;fork[n] == FREE)) {
    me-&gt;fork[m] = USED;
    me-&gt;fork[n] = USED;
    me-&gt;isHungry[m] = 0U;

    /* synchronoulsy dispatch EAT event to the Philo component */
    evt.super.sig = EAT_SIG;
    evt.philo = &amp;me-&gt;philo[m];
    QHSM_DISPATCH(&amp;me-&gt;philo[m].super, (QEvt const *)&amp;evt);

    BSP_displayPhilStat(m, &quot;eating  &quot;);
}</action>
      <tran_glyph conn="4,41,3,-1,16">
       <action box="0,-2,6,2"/>
      </tran_glyph>
     </tran>
     <tran trig="EAT">
      <action>Q_ERROR();</action>
      <tran_glyph conn="4,44,3,-1,16">
       <action box="0,-2,12,4"/>
      </tran_glyph>
     </tran>
     <tran trig="PAUSE" target="../../4">
      <tran_glyph conn="4,48,3,1,36,6,-2">
       <action box="0,-2,7,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="4,26,34,24">
      <entry box="1,2,27,2"/>
     </state_glyph>
    </state>
    <state name="paused">
     <entry>BSP_displayPaused(1U);</entry>
     <exit>BSP_displayPaused(0U);</exit>
     <tran trig="SERVE" target="../../3">
      <tran_glyph conn="4,64,3,1,38,-20,-4">
       <action box="0,-2,7,2"/>
      </tran_glyph>
     </tran>
     <tran trig="HUNGRY">
      <action>uint8_t n;

/* find the index of the Philo from the event */
n = (Q_EVT_CAST(TableEvt)-&gt;philo - &amp;me-&gt;philo[0]);
/* philo ID must be in range and he must be not hungry */
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (!me-&gt;isHungry[n]));

me-&gt;isHungry[n] = 1U;
BSP_displayPhilStat(n, &quot;hungry  &quot;);</action>
      <tran_glyph conn="4,68,3,-1,16">
       <action box="0,-2,12,2"/>
      </tran_glyph>
     </tran>
     <tran trig="DONE">
      <action>uint8_t n, m;

/* find the index of the Philo from the event */
n = (Q_EVT_CAST(TableEvt)-&gt;philo - &amp;me-&gt;philo[0]);
/* philo ID must be in range and he must be not hungry */
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (!me-&gt;isHungry[n]));

BSP_displayPhilStat(n, &quot;thinking&quot;);
m = LEFT(n);
/* both forks of Phil[n] must be used */
Q_ASSERT((me-&gt;fork[n] == USED) &amp;&amp; (me-&gt;fork[m] == USED));

me-&gt;fork[m] = FREE;
me-&gt;fork[n] = FREE;</action>
      <tran_glyph conn="4,72,3,-1,16">
       <action box="0,-2,11,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="4,52,34,22">
      <entry box="1,2,18,4"/>
      <exit box="1,6,18,4"/>
     </state_glyph>
    </state>
    <state_glyph node="2,5,42,71"/>
   </state>
   <state_diagram size="50,78"/>
  </statechart>
 </class>
 <attribute name="AO_Table" type="QActive * const" visibility="0x00" properties="0x00"/>
 <operation name="Table_ctor" type="void" visibility="0x00" properties="0x00">
  <code>uint8_t n;
Table *me = &amp;l_table;

QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Table_initial));

for (n = 0U; n &lt; N_PHILO; ++n) {
    Philo_ctor(&amp;me-&gt;philo[n]);
    me-&gt;fork[n] = FREE;
    me-&gt;isHungry[n] = 0U;
}</code>
 </operation>
 <directory name=".">
  <file name="dpp.h">
   <text>#ifndef dpp_h
#define dpp_h

enum DPPSignals {
    EAT_SIG = Q_USER_SIG, /* published by Table to let a philosopher eat */
    DONE_SIG,       /* published by Philosopher when done eating */
    PAUSE_SIG,      /* published by BSP to pause serving forks */
    SERVE_SIG,      /* published by BSP to serve re-start serving forks */
    TEST_SIG,       /* published by BSP to test the application */
    MAX_PUB_SIG,    /* the last published signal */

    HUNGRY_SIG,     /* posted direclty to Table from hungry Philo */
    TIMEOUT_SIG,    /* used by Philosophers for time events */
    MAX_SIG         /* the last signal */
};

enum {
    N_PHILO = 5 /* number of Philos */
};

struct Philo; /* forward declaration */

$declare(Cont::CompTimeEvt)

$declare(Comp::Philo)

$declare(Cont::TableEvt)

$declare(Cont::Table_ctor)
$declare(Cont::AO_Table)

#endif /* dpp_h */</text>
  </file>
  <file name="table.c">
   <text>#include &quot;qpc.h&quot;
#include &quot;dpp.h&quot;
#include &quot;bsp.h&quot;

Q_DEFINE_THIS_FILE

/* Active object class -----------------------------------------------------*/
$declare(Cont::Table)

#define RIGHT(n_) ((uint8_t)(((n_) + (N_PHILO - 1U)) % N_PHILO))
#define LEFT(n_)  ((uint8_t)(((n_) + 1U) % N_PHILO))
#define FREE      ((uint8_t)0)
#define USED      ((uint8_t)1)

/* Local objects -----------------------------------------------------------*/
static Table l_table; /* the single instance of the Table active object */

/* Global-scope objects ----------------------------------------------------*/
QActive * const AO_Table = &amp;l_table.super; /* &quot;opaque&quot; AO pointer */

//............................................................................
$define(Cont::CompTimeEvt)
$define(Cont::Table_ctor)
$define(Cont::Table)</text>
  </file>
 </directory>
</package>
